# Relesae build for the main branch across multiple targets.
name: Relesae Build

on:
  push:
    tags:
      - v*
  workflow_dispatch:

env:
  docker-registry: docker.pkg.github.com
  docker-config-path: ci/docker

jobs:
  build_containers:
    name: Create docker image
    strategy:
      matrix:
        container:
        - name: bionic
        # - name: focal
        # - name: docurium
        - name: bionic-x86
          dockerfile: bionic
          base: multiarch/ubuntu-core:x86-bionic
          qemu: true
        - name: bionic-arm32
          dockerfile: bionic
          base: multiarch/ubuntu-core:armhf-bionic
          qemu: true
        - name: bionic-arm64
          dockerfile: bionic
          base: multiarch/ubuntu-core:arm64-bionic
          qemu: true
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
      if: github.event_name != 'pull_request'
    - name: Setup QEMU
      run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      if: matrix.container.qemu == true
    - name: Download existing container
      run: |
        "${{ github.workspace }}/ci/getcontainer.sh" "${{ matrix.container.name }}" "${{ matrix.container.dockerfile }}"
      env:
        DOCKER_REGISTRY: ${{ env.docker-registry }}
        GITHUB_TOKEN: ${{ secrets.github_token }}
      working-directory: ${{ env.docker-config-path }}
      if: github.event_name != 'pull_request'
    - name: Build and publish image
      run: |
        if [ "${{ matrix.container.base }}" != "" ]; then
          BASE_ARG="--build-arg BASE=${{ matrix.container.base }}"
        fi
        docker build -t ${{ env.docker-registry-container-sha }} ${BASE_ARG} -f ${{ env.dockerfile }} .
        docker push ${{ env.docker-registry-container-sha }}
      working-directory: ${{ env.docker-config-path }}
      if: github.event_name != 'pull_request' && env.docker-container-exists != 'true'
  # Run our Relesae builds.  We build a matrix with the various build
  # targets and their details.  Then we build either in a docker container
  # (Linux) or on the actual hosts (macOS, Windows).
  build:
    name: Build
    # needs: [ build_containers ]
    strategy:
      matrix:
        platform:
        - # Focal, Clang, OpenSSL
          container:
            name: bionic
          env:
            CC: clang
            CMAKE_GENERATOR: Ninja
            CMAKE_OPTIONS: -DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=valgrind -DUSE_GSSAPI=ON
          os: ubuntu-latest
        - # macOS
          os: macos-10.15
          env:
            CC: clang
            CMAKE_OPTIONS: -DREGEX_BACKEND=regcomp_l -DDEPRECATE_HARD=ON -DUSE_LEAK_CHECKER=leaks -DUSE_GSSAPI=ON
            PKG_CONFIG_PATH: /usr/local/opt/openssl/lib/pkgconfig
            SKIP_SSH_TESTS: true
            SKIP_NEGOTIATE_TESTS: true
          setup-script: osx
        - # Windows amd64 Visual Studio
          os: windows-2019
          env:
            ARCH: amd64
            CMAKE_GENERATOR: Visual Studio 16 2019
            CMAKE_OPTIONS: -A x64 -DWIN32_LEAKCHECK=ON -DDEPRECATE_HARD=ON
            SKIP_SSH_TESTS: true
            SKIP_NEGOTIATE_TESTS: true
        - # Windows x86 Visual Studio
          os: windows-2019
          env:
            ARCH: x86
            CMAKE_GENERATOR: Visual Studio 16 2019
            CMAKE_OPTIONS: -A Win32 -DWIN32_LEAKCHECK=ON -DDEPRECATE_HARD=ON -DUSE_SHA1=HTTPS -DUSE_BUNDLED_ZLIB=ON
            SKIP_SSH_TESTS: true
            SKIP_NEGOTIATE_TESTS: true
        - # Bionic, x86, Clang, OpenSSL
          container:
            name: bionic-x86
            dockerfile: bionic
            qemu: true
          env:
            CC: clang
            CMAKE_GENERATOR: Ninja
            CMAKE_OPTIONS: -DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_GSSAPI=ON
            RUN_INVASIVE_TESTS: true
            SKIP_PROXY_TESTS: true
          os: ubuntu-latest
        - # Bionic, arm32, Clang, OpenSSL
          container:
            name: bionic-arm32
            dockerfile: bionic
            qemu: true
          env:
            CC: clang
            CMAKE_GENERATOR: Ninja
            CMAKE_OPTIONS: -DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_GSSAPI=ON
            RUN_INVASIVE_TESTS: true
            SKIP_PROXY_TESTS: true
          os: ubuntu-latest
        - # Bionic, arm64, Clang, OpenSSL
          container:
            name: bionic-arm64
            dockerfile: bionic
            qemu: true
          env:
            CC: clang
            CMAKE_GENERATOR: Ninja
            CMAKE_OPTIONS: -DUSE_HTTPS=OpenSSL -DDEPRECATE_HARD=ON -DUSE_GSSAPI=ON
            RUN_INVASIVE_TESTS: true
            SKIP_PROXY_TESTS: true
          os: ubuntu-latest
      fail-fast: false
    env: ${{ matrix.platform.env }}
    runs-on: ${{ matrix.platform.os }}
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up build environment
      run: ci/setup-${{ matrix.platform.setup-script }}.sh
      shell: bash
      if: matrix.platform.setup-script != ''
    - name: Setup QEMU
      run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
      if: matrix.platform.container.qemu == true
    - name: Download container
      run: |
        "${{ github.workspace }}/ci/getcontainer.sh" "${{ matrix.platform.container.name }}" "${{ matrix.platform.container.dockerfile }}"
      env:
        DOCKER_REGISTRY: ${{ env.docker-registry }}
        GITHUB_TOKEN: ${{ secrets.github_token }}
      working-directory: ${{ env.docker-config-path }}
      if: matrix.platform.container.name != ''
    - name: Create container
      run: docker build -t ${{ env.docker-registry-container-sha }} -f ${{ env.dockerfile }} .
      working-directory: ${{ env.docker-config-path }}
      if: matrix.platform.container.name != '' && env.docker-container-exists != 'true'
    - name: Build and test
      run: |
        export GITTEST_NEGOTIATE_PASSWORD="${{ secrets.GITTEST_NEGOTIATE_PASSWORD }}"

        if [ -n "${{ matrix.platform.container.name }}" ]; then
          docker run \
              --rm \
              -v "$(pwd):/home/libgit2/source" \
              -w /home/libgit2/source \
              -e ASAN_SYMBOLIZER_PATH \
              -e CC \
              -e CFLAGS \
              -e CMAKE_GENERATOR \
              -e CMAKE_OPTIONS \
              -e GITTEST_NEGOTIATE_PASSWORD \
              -e PKG_CONFIG_PATH \
              -e SKIP_NEGOTIATE_TESTS \
              -e SKIP_SSH_TESTS \
              -e TSAN_OPTIONS \
              ${{ env.docker-registry-container-sha }} \
              /bin/bash -c "mkdir release && mkdir build && cd build && ../ci/build.sh &&
              cp libgit2.so ../release/libgit2-${{ matrix.platform.container.name }}.so
              "
        else
          /bin/bash -c "mkdir build && cd build && ../ci/build.sh"

          mkdir release
          OSNAME="${{matrix.platform.os}}"
          if [ "${OSNAME:0:5}" = "macos" ]; then
            cp build/libgit2.dylib release/libgit2.dylib
          elif [ "${OSNAME:0:5}" = "windo" ]; then
            cp build/Debug/git2.dll release/git2-${{matrix.platform.env.ARCH}}.dll
          fi
        fi
      shell: bash
    - uses: actions/upload-artifact@v2
      with:
        name: release_artifact
        path: "release/"

  zip_header_files:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Zip Header files
      run:  mkdir -p release && zip -r release/include.zip include
    - name: Zip example files
      run:  mkdir -p release && zip -r release/example.zip example
    - uses: actions/upload-artifact@v2
      with:
        name: release_artifact
        path: "release/"
  upload_files:
    runs-on: ubuntu-latest
    needs: [zip_header_files,build]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: release_artifact
        path: "release/"
    - name: Zip dylib files
      run:  mkdir -p release && zip -r release/dylib.zip *.so *.dll *.dylib
    - name: Upload Release Asset
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: "release/*"
